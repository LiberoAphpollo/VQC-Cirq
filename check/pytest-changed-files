#!/usr/bin/env bash

################################################################################
# Runs pytest on files that have been modified.
#
# Usage:
#     check/pytest-changed-files COMPARISON_BRANCH_OR_COMMIT_ID [--pytest-flags]
#
# This tool is not clever; it does not understand dependencies between all
# files. If "x.py" or "x_test.py" have been modified, it will include
# "x_test.py" in the arguments given to pytest. That's all it does.
#
# You must specify a git commit or branch to compare against (i.e. to use when
# determining whether or not a file is considered to have "changed"). For
# example, you can compare against 'origin/master' or 'HEAD~1'.
#
# You can pass flags such as "-v" into pytest by placing them after the
# comparison id.
################################################################################

# Get the working directory to the repo root.
own_directory="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd ${own_directory}
repo_dir=$(git rev-parse --show-toplevel)
cd ${repo_dir}

if [ -z $1 ] || [[ $1 == -* ]]; then
    echo -e "\e[31mArgument #1 must be what to diff against (e.g. 'origin/master' or 'HEAD~1').\e[0m"
    exit 1
fi

# Get the _test version of changed python files.
changed=$(git diff --name-only "$1" \
    | grep "\.py$" \
    | sed -e "s/\.py$/_test.py/" \
    | sed -e "s/_test_test\.py$/_test.py/" \
    | perl -ne 'chomp(); if (-e $_) {print "$_\n"}' \
    | uniq \
)
num_changed=$(echo -e "${changed}" | wc -w)

echo "Found ${num_changed} differing files with associated tests."
if [ -z "${changed}" ]; then
    exit 0
fi

pytest "${@:2}" ${changed}
