syntax = "proto3";

package cirq.api.google.v1;

option java_package = "com.google.cirq.api.google.v1";
option java_outer_classname = "ParamsProto";
option java_multiple_files = true;

// Specifies how to repeatedly sample a circuit, with or without sweeping over
// varying parameter-dicts.
message ParameterSweep {
  // How many times to sample, for each parameter-dict that is swept over.
  int32 repetitions = 1;

  // Which parameters, that control gates in the circuit, to try.
  // When not specified, the circuit is evaluated unparameterized.
  ParameterSweepZipProduct sweep = 2;
}

// A cartesian product of parameter sweeps.
//
// Note: The empty product is a single parameter-dict with no parameters
// specified.
message ParameterSweepZipProduct {

  // A list of parameter sweeps to combine into a cartesian sweep.
  repeated ParameterSweepZip factors = 1;
}

// A pairwise-joining of parameter sweeps.
message ParameterSweepZip {
  // Note: if one sweep is shorter, the others will be truncated.
  repeated SingleParameterSweep sweeps = 1;
}

// A set of values to try for a particular parameter.
message SingleParameterSweep {
  // The parameter being varied.
  string parameter_name = 1;
  // How to vary the parameter.
  oneof sweep {
    // An explicit list of points to try.
    SweepPoints sweep_points = 2;
    // Uniformly-spaced sampling over a range.
    SweepLinspace sweep_linspace = 3;
  }
}

// A list of values.
message SweepPoints {
  // The values.
  repeated float points = 1;
}

// A range of evenly-spaced values.
message SweepLinspace {
  // The start of the range.
  float first_point = 1;
  // The end of the range.
  float last_point = 2;
  // The number of points in the range (including first and last).
  int64 num_points = 3;
}

// A point sampled during a parameter sweep.
message ParameterDict {
  // Maps parameter names to values.
  map<string, float> assignments = 1;
}
