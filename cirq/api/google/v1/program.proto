syntax = "proto3";

import "cirq/api/google/v1/operations.proto";
import "cirq/api/google/v1/params.proto";

package cirq.api.google.v1;

option java_package = "com.google.cirq.api.google.v1";
option java_outer_classname = "ProgramProto";
option java_multiple_files = true;

// A quantum program. This includes a quantum circuit and also a set of circuit
// parameters over which the circuit should be run.
message Program {
  // Gates and measurements that make up the circuit.
  repeated Operation operations = 1;

  // The circuit parameters will be evaluated for each parameter set.
  repeated ParameterSweep parameter_sweep = 2;
}

// The parameters used to generate result along with the results for this
// set of parameters.
message ParameterizedResult {
  // The parameter dict that was used when generating these results.
  ParameterDict params = 1;

  // The measurement results. This is a packed representation of all of the
  // measurements for fixed set of parameters (specified by params above)
  // across all of the repetitions for this set of parameters.
  //
  // These bytes should be interpreted using little endian, i.e. the least
  // significant bit of all bytes is the 0th bit. The bytes themselves
  // represent num_repetitions chunks of bytes. Each chunk represents the
  // result of one run of the Program.  Within a chunk the bytes are also
  // ordered in littled endian, and the bits are ordered in according to the
  // repeated measurement_keys in Result. For a chunk, if the ith key in this
  // list has size size_i, then the kth key corresponds to the bits from
  // \sum_{i<k} size_i (inclusive) to \sum_{i<=k} size_i (exclusive) within
  // the chunk.
  bytes measurement_results = 2;
}

// A message which represents a measurement key, along with the number of
// measurements that are associated with this key.
message MeasurementKey {
  // The measurement key.
  string key = 1;

  // The number of measurements in the Program for this key.
  int32 size = 2;
}

// The overall results of running a Program.
message Result {
  // A list of measurement keys (string) along with the number of measurements
  // for each of these keys. The total number of measurements in the program
  // is the sum of all the sizes. The measurement keys in the repeated
  // list are all unique: if a measurement with the same key is repeated
  // the bit results will come back in the order the gate appears in the
  // Program.
  repeated MeasurementKey measurement_keys = 1;

  // The total number of repetitions that were performed. Each of the
  // parameterized_results below is repeated this many times.
  int32 num_repetitions = 2;

  // The results each for a specific set of fixed parameters.
  repeated ParameterizedResult parameterized_results = 3;
}
